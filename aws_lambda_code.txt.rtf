{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import math\
import random\
import json\
import statistics \
\
def lambda_handler(event,context):\
    buy=[]\
    data=[]\
    fix_len=[]\
    newvar95_h=[]\
    newvar99_h=[]\
    newvar95_i=[]\
    newvar99_i=[]\
    newvar95_s=[]\
    newvar99_s=[]\
    newvar95_m=[]\
    newvar99_m=[]\
    list_date_h=[]\
    list_date_i=[]\
    list_date_m=[]\
    list_date_s=[]\
    buy_type_h=[]\
    buy_type_i=[]\
    sell_type_s=[]\
    sell_type_m=[]\
    \
    Open = json.loads(event['key1'])\
    High = json.loads(event['key2'])\
    Low = json.loads(event['key3'])\
    Close = json.loads(event['key4'])\
    Signal = json.loads(event['key8'])\
    minhistory = int(event['key5'])\
    shots = int(event['key6'])\
    user_signal = event['key7']\
    Date = eval(event['key9'])\
    signal_type = eval(event['key10'])\
    \
    data.append(Open)\
    data.append(High)\
    data.append(Low)\
    data.append(Close)\
    data.append(Signal)\
    data.append(Date)\
    data.append(signal_type)\
\
    for i in range(minhistory, len(data[0])):\
        if user_signal == "1":\
            if data[6][i] == 'H':\
                if (data[4][i] == 1): # if we were only interested in Buy signals \
                    fix_len = data[3][i-minhistory:i]\
                    changes=[]\
                    for x1,x2 in zip(fix_len[:-1],fix_len[1:]):\
                        pct = ((x2-x1)/x1)\
                        changes.append(pct)\
                    mean = sum(changes)/len(changes)\
                    std = statistics.pstdev(changes)\
                    simulated = [random.gauss(mean,std) for x in range(shots)]\
                    simulated.sort(reverse=True)\
                    var95 = simulated[int(len(simulated)*0.95)]\
                    var99 = simulated[int(len(simulated)*0.99)]\
                    list_date_h.append(data[5][i])\
                    newvar95_h.append(var95)\
                    newvar99_h.append(var99)\
                    buy_type_h.append(data[6][i])\
            \
            if data[6][i] == 'I':\
                if (data[4][i] == 1): # if we were only interested in Buy signals \
                    fix_len = data[3][i-minhistory:i]\
                    changes=[]\
                    for x1,x2 in zip(fix_len[:-1],fix_len[1:]):\
                        pct = ((x2-x1)/x1)\
                        changes.append(pct)\
                    mean = sum(changes)/len(changes)\
                    std = statistics.pstdev(changes)\
                    simulated = [random.gauss(mean,std) for x in range(shots)]\
                    simulated.sort(reverse=True)\
                    var95 = simulated[int(len(simulated)*0.95)]\
                    var99 = simulated[int(len(simulated)*0.99)]\
                    list_date_i.append(data[5][i])\
                    newvar95_i.append(var95)\
                    newvar99_i.append(var99)\
                    buy_type_i.append(data[6][i])\
\
        if user_signal == "2":\
            if data[6][i] == 'S':\
                if (data[4][i]== 2): # if we were only interested in Sell signals\
                    fix_len = data[3][i-minhistory:i]\
                    changes=[]\
                    for x1,x2 in zip(fix_len[:-1],fix_len[1:]):\
                        pct = ((x2-x1)/x1)\
                        changes.append(pct)\
                    mean = sum(changes)/len(changes)\
                    std = statistics.pstdev(changes)\
                    simulated = [random.gauss(mean,std) for x in range(shots)]\
                    simulated.sort(reverse=True)\
                    var95 = simulated[int(len(simulated)*0.95)]\
                    var99 = simulated[int(len(simulated)*0.99)]\
                    list_date_s.append(data[5][i])\
                    newvar95_s.append(var95)\
                    newvar99_s.append(var99)\
                    sell_type_s.append(data[6][i])\
                    \
            if data[6][i] == 'M':\
                if (data[4][i]== 2): # if we were only interested in Sell signals\
                    fix_len = data[3][i-minhistory:i]\
                    changes=[]\
                    for x1,x2 in zip(fix_len[:-1],fix_len[1:]):\
                        pct = ((x2-x1)/x1)\
                        changes.append(pct)\
                    mean = sum(changes)/len(changes)\
                    std = statistics.pstdev(changes)\
                    simulated = [random.gauss(mean,std) for x in range(shots)]\
                    simulated.sort(reverse=True)\
                    var95 = simulated[int(len(simulated)*0.95)]\
                    var99 = simulated[int(len(simulated)*0.99)]\
                    list_date_m.append(data[5][i])\
                    newvar95_m.append(var95)\
                    newvar99_m.append(var99)\
                    sell_type_m.append(data[6][i])\
\
\
    if user_signal == "1":\
        return json.dumps((\{"95%": newvar95_h,\
                            "99%": newvar99_h,\
                            "Type": buy_type_h,\
                            "Date": list_date_h\},\
                            \{"95%": newvar95_i,\
                            "99%": newvar99_i,\
                            "Type": buy_type_i,\
                            "Date": list_date_i\}))\
    else: \
        return json.dumps((\{"95%": newvar95_s,\
                            "99%": newvar99_s,\
                            "Type": sell_type_s,\
                            "Date": list_date_s\},\
                            \{"95%": newvar95_m,\
                            "99%": newvar99_m,\
                            "Type": sell_type_m,\
                            "Date": list_date_m\}))}